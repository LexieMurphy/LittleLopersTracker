{"ast":null,"code":"/*!\n * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* eslint-env es6 */\nvar util = module.exports;\n\nutil.base64UrlToBase64 = function (b64u) {\n  return b64u.replace(/\\-/g, '+').replace(/_/g, '/');\n};\n\nutil.base64UrlToString = function (b64u) {\n  var b64 = util.base64UrlToBase64(b64u);\n\n  switch (b64.length % 4) {\n    case 0:\n      break;\n\n    case 2:\n      b64 += '==';\n      break;\n\n    case 3:\n      b64 += '=';\n      break;\n\n    default:\n      throw 'Not a valid Base64Url';\n  }\n\n  var utf8 = atob(b64);\n\n  try {\n    return decodeURIComponent(escape(utf8));\n  } catch (e) {\n    return utf8;\n  }\n};\n\nutil.stringToBuffer = function (str) {\n  var buffer = new Uint8Array(str.length);\n\n  for (var i = 0; i < str.length; i++) {\n    buffer[i] = str.charCodeAt(i);\n  }\n\n  return buffer;\n};\n\nutil.base64UrlDecode = function (str) {\n  return atob(util.base64UrlToBase64(str));\n};\n\nutil.bind = function (fn, ctx) {\n  var additionalArgs = Array.prototype.slice.call(arguments, 2);\n  return function () {\n    var args = Array.prototype.slice.call(arguments);\n    args = additionalArgs.concat(args);\n    return fn.apply(ctx, args);\n  };\n};\n\nutil.isAbsoluteUrl = function (url) {\n  return /^(?:[a-z]+:)?\\/\\//i.test(url);\n};\n\nutil.isString = function (obj) {\n  return Object.prototype.toString.call(obj) === '[object String]';\n};\n\nutil.isObject = function (obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n};\n\nutil.isNumber = function (obj) {\n  return Object.prototype.toString.call(obj) === '[object Number]';\n};\n\nutil.isArray = function (obj) {\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nutil.isoToUTCString = function (str) {\n  var parts = str.match(/\\d+/g),\n      isoTime = Date.UTC(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]),\n      isoDate = new Date(isoTime);\n  return isoDate.toUTCString();\n};\n\nutil.toQueryParams = function (obj) {\n  var str = [];\n\n  if (obj !== null) {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key) && obj[key] !== undefined && obj[key] !== null) {\n        str.push(key + '=' + encodeURIComponent(obj[key]));\n      }\n    }\n  }\n\n  if (str.length) {\n    return '?' + str.join('&');\n  } else {\n    return '';\n  }\n};\n\nutil.genRandomString = function (length) {\n  var randomCharset = 'abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  var random = '';\n\n  for (var c = 0, cl = randomCharset.length; c < length; ++c) {\n    random += randomCharset[Math.floor(Math.random() * cl)];\n  }\n\n  return random;\n};\n\nutil.extend = function () {\n  var obj1 = arguments[0];\n  var objArray = [].slice.call(arguments, 1);\n  objArray.forEach(function (obj) {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        obj1[prop] = obj[prop];\n      }\n    }\n  });\n};\n\nutil.removeNils = function (obj) {\n  var cleaned = {};\n\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      var value = obj[prop];\n\n      if (value !== null && value !== undefined) {\n        cleaned[prop] = value;\n      }\n    }\n  }\n\n  return cleaned;\n};\n\nutil.clone = function (obj) {\n  if (obj) {\n    var str = JSON.stringify(obj);\n\n    if (str) {\n      return JSON.parse(str);\n    }\n  }\n\n  return obj;\n}; // Analogous to _.omit\n\n\nutil.omit = function (obj) {\n  var props = Array.prototype.slice.call(arguments, 1);\n  var newobj = {};\n\n  for (var p in obj) {\n    if (obj.hasOwnProperty(p) && props.indexOf(p) == -1) {\n      newobj[p] = obj[p];\n    }\n  }\n\n  return util.clone(newobj);\n};\n\nutil.find = function (collection, searchParams) {\n  var c = collection.length;\n\n  while (c--) {\n    var item = collection[c];\n    var found = true;\n\n    for (var prop in searchParams) {\n      if (!searchParams.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      if (item[prop] !== searchParams[prop]) {\n        found = false;\n        break;\n      }\n    }\n\n    if (found) {\n      return item;\n    }\n  }\n};\n\nutil.getLink = function (obj, linkName, altName) {\n  if (!obj || !obj._links) {\n    return;\n  }\n\n  var link = util.clone(obj._links[linkName]); // If a link has a name and we have an altName, return if they match\n\n  if (link && link.name && altName) {\n    if (link.name === altName) {\n      return link;\n    }\n  } else {\n    return link;\n  }\n};\n\nutil.getNativeConsole = function () {\n  return window.console;\n};\n\nutil.getConsole = function () {\n  var nativeConsole = util.getNativeConsole();\n\n  if (nativeConsole && nativeConsole.log) {\n    return nativeConsole;\n  }\n\n  return {\n    log: function log() {}\n  };\n};\n\nutil.warn = function (text) {\n  /* eslint-disable no-console */\n  util.getConsole().log('[okta-auth-sdk] WARN: ' + text);\n  /* eslint-enable */\n};\n\nutil.deprecate = function (text) {\n  /* eslint-disable no-console */\n  util.getConsole().log('[okta-auth-sdk] DEPRECATION: ' + text);\n  /* eslint-enable */\n};\n\nutil.deprecateWrap = function (text, fn) {\n  return function () {\n    util.deprecate(text);\n    return fn.apply(null, arguments);\n  };\n};\n\nutil.removeTrailingSlash = function (path) {\n  if (!path) {\n    return;\n  }\n\n  if (path.slice(-1) === '/') {\n    return path.slice(0, -1);\n  }\n\n  return path;\n};\n\nutil.isIE11OrLess = function () {\n  return !!document.documentMode && document.documentMode <= 11;\n};","map":null,"metadata":{},"sourceType":"script"}