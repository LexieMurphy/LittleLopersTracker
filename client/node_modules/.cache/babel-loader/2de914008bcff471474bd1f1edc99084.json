{"ast":null,"code":"/* eslint-disable complexity, max-statements */\nvar http = require('./http');\n\nvar util = require('./util');\n\nvar oauthUtil = require('./oauthUtil');\n\nvar Q = require('q');\n\nvar sdkCrypto = require('./crypto');\n\nvar AuthSdkError = require('./errors/AuthSdkError');\n\nvar OAuthError = require('./errors/OAuthError');\n\nvar config = require('./config');\n\nvar cookies = require('./cookies');\n\nfunction decodeToken(token) {\n  var jwt = token.split('.');\n  var decodedToken;\n\n  try {\n    decodedToken = {\n      header: JSON.parse(util.base64UrlToString(jwt[0])),\n      payload: JSON.parse(util.base64UrlToString(jwt[1])),\n      signature: jwt[2]\n    };\n  } catch (e) {\n    throw new AuthSdkError('Malformed token');\n  }\n\n  return decodedToken;\n}\n\nfunction verifyIdToken(sdk, idToken, options) {\n  options = options || {};\n\n  if (!sdk.features.isTokenVerifySupported()) {\n    return Q.reject(new AuthSdkError('This browser doesn\\'t support crypto.subtle'));\n  }\n\n  function isExpired(jwtExp) {\n    var expirationTime;\n\n    if (options.expirationTime || options.expirationTime === 0) {\n      expirationTime = options.expirationTime;\n    } else {\n      expirationTime = Math.floor(Date.now() / 1000);\n    }\n\n    if (jwtExp && jwtExp > expirationTime) {\n      return true;\n    }\n  }\n\n  function hasAudience(jwtAudience) {\n    if (!options.audience) {\n      return true;\n    }\n\n    var audiences = Array.isArray(options.audience) ? options.audience : [options.audience];\n    var jwtAudiences = Array.isArray(jwtAudience) ? jwtAudience : [jwtAudience];\n    var ai = audiences.length;\n\n    while (ai--) {\n      var aud = audiences[ai];\n\n      if (jwtAudiences.indexOf(aud) !== -1) {\n        return true;\n      }\n    }\n  }\n\n  return oauthUtil.getWellKnown(sdk).then(function (res) {\n    return http.get(sdk, res['jwks_uri']);\n  }).then(function (res) {\n    var key = res.keys[0];\n    return sdkCrypto.verifyToken(idToken, key);\n  }).then(function (res) {\n    if (!res) {\n      return false;\n    }\n\n    var jwt = sdk.token.decode(idToken);\n\n    if (isExpired(jwt.payload.exp)) {\n      return false;\n    }\n\n    if (!hasAudience(jwt.payload.aud)) {\n      return false;\n    }\n\n    if (options.issuer && options.issuer !== jwt.payload.iss) {\n      return false;\n    }\n\n    return true;\n  });\n}\n\nfunction verifyToken(sdk, token, nonce, ignoreSignature) {\n  return new Q().then(function () {\n    if (!token || !token.idToken) {\n      throw new AuthSdkError('Only idTokens may be verified');\n    }\n\n    var jwt = decodeToken(token.idToken); // Standard claim validation\n\n    oauthUtil.validateClaims(sdk, jwt.payload, token.clientId, token.issuer, nonce); // If the browser doesn't support native crypto or we choose not \n    // to verify the signature, bail early\n\n    if (ignoreSignature || !sdk.features.isTokenVerifySupported()) {\n      return token;\n    }\n\n    return oauthUtil.getKey(sdk, token.issuer, jwt.header.kid).then(function (key) {\n      return sdkCrypto.verifyToken(token.idToken, key);\n    }).then(function (valid) {\n      if (!valid) {\n        throw new AuthSdkError('The token signature is not valid');\n      }\n\n      return token;\n    });\n  });\n}\n\nfunction refreshIdToken(sdk, options) {\n  options = options || {};\n  options.display = null;\n  options.prompt = 'none';\n  return getToken(sdk, options);\n}\n\nfunction addPostMessageListener(sdk, timeout, state) {\n  var deferred = Q.defer();\n\n  function responseHandler(e) {\n    if (!e.data || e.origin !== sdk.options.url || e.data && util.isString(state) && e.data.state !== state) {\n      return;\n    }\n\n    deferred.resolve(e.data);\n  }\n\n  oauthUtil.addListener(window, 'message', responseHandler);\n  return deferred.promise.timeout(timeout || 120000, new AuthSdkError('OAuth flow timed out')).fin(function () {\n    oauthUtil.removeListener(window, 'message', responseHandler);\n  });\n}\n\nfunction addFragmentListener(sdk, windowEl, timeout) {\n  var deferred = Q.defer();\n\n  function hashChangeHandler() {\n    /*\n      We are only able to access window.location.hash on a window\n      that has the same domain. A try/catch is necessary because\n      there's no other way to determine that the popup is in\n      another domain. When we try to access a window on another \n      domain, an error is thrown.\n    */\n    try {\n      if (windowEl && windowEl.location && windowEl.location.hash) {\n        deferred.resolve(oauthUtil.hashToObject(windowEl.location.hash));\n      } else if (windowEl && !windowEl.closed) {\n        setTimeout(hashChangeHandler, 500);\n      }\n    } catch (err) {\n      setTimeout(hashChangeHandler, 500);\n    }\n  }\n\n  hashChangeHandler();\n  return deferred.promise.timeout(timeout || 120000, new AuthSdkError('OAuth flow timed out'));\n}\n\nfunction handleOAuthResponse(sdk, oauthParams, res, urls) {\n  urls = urls || {};\n  var tokenTypes = oauthParams.responseType;\n  var scopes = util.clone(oauthParams.scopes);\n  var clientId = oauthParams.clientId || sdk.options.clientId;\n  return new Q().then(function () {\n    if (res['error'] || res['error_description']) {\n      throw new OAuthError(res['error'], res['error_description']);\n    }\n\n    if (res.state !== oauthParams.state) {\n      throw new AuthSdkError('OAuth flow response state doesn\\'t match request state');\n    }\n\n    var tokenDict = {};\n\n    if (res['access_token']) {\n      tokenDict['token'] = {\n        accessToken: res['access_token'],\n        expiresAt: Number(res['expires_in']) + Math.floor(Date.now() / 1000),\n        tokenType: res['token_type'],\n        scopes: scopes,\n        authorizeUrl: urls.authorizeUrl,\n        userinfoUrl: urls.userinfoUrl\n      };\n    }\n\n    if (res['code']) {\n      tokenDict['code'] = {\n        authorizationCode: res['code']\n      };\n    }\n\n    if (res['id_token']) {\n      var jwt = sdk.token.decode(res['id_token']);\n      var idToken = {\n        idToken: res['id_token'],\n        claims: jwt.payload,\n        expiresAt: jwt.payload.exp,\n        scopes: scopes,\n        authorizeUrl: urls.authorizeUrl,\n        issuer: urls.issuer,\n        clientId: clientId\n      };\n      return verifyToken(sdk, idToken, oauthParams.nonce, true).then(function () {\n        tokenDict['id_token'] = idToken;\n        return tokenDict;\n      });\n    }\n\n    return tokenDict;\n  }).then(function (tokenDict) {\n    if (!Array.isArray(tokenTypes)) {\n      return tokenDict[tokenTypes];\n    }\n\n    if (!tokenDict['token'] && !tokenDict['id_token']) {\n      throw new AuthSdkError('Unable to parse OAuth flow response');\n    } // Create token array in the order of the responseType array\n\n\n    return tokenTypes.map(function (item) {\n      return tokenDict[item];\n    });\n  });\n}\n\nfunction getDefaultOAuthParams(sdk, oauthOptions) {\n  oauthOptions = util.clone(oauthOptions) || {};\n\n  if (oauthOptions.scope) {\n    util.deprecate('The param \"scope\" is equivalent to \"scopes\". Use \"scopes\" instead.');\n    oauthOptions.scopes = oauthOptions.scope;\n    delete oauthOptions.scope;\n  }\n\n  var defaults = {\n    clientId: sdk.options.clientId,\n    redirectUri: sdk.options.redirectUri || window.location.href,\n    responseType: 'id_token',\n    responseMode: 'okta_post_message',\n    state: util.genRandomString(64),\n    nonce: util.genRandomString(64),\n    scopes: ['openid', 'email']\n  };\n  util.extend(defaults, oauthOptions);\n  return defaults;\n}\n\nfunction convertOAuthParamsToQueryParams(oauthParams) {\n  // Quick validation\n  if (!oauthParams.clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to get a token');\n  }\n\n  if (util.isString(oauthParams.responseType) && oauthParams.responseType.indexOf(' ') !== -1) {\n    throw new AuthSdkError('Multiple OAuth responseTypes must be defined as an array');\n  } // Convert our params to their actual OAuth equivalents\n\n\n  var oauthQueryParams = util.removeNils({\n    'client_id': oauthParams.clientId,\n    'redirect_uri': oauthParams.redirectUri,\n    'response_type': oauthParams.responseType,\n    'response_mode': oauthParams.responseMode,\n    'state': oauthParams.state,\n    'nonce': oauthParams.nonce,\n    'prompt': oauthParams.prompt,\n    'display': oauthParams.display,\n    'sessionToken': oauthParams.sessionToken,\n    'idp': oauthParams.idp,\n    'max_age': oauthParams.maxAge\n  });\n\n  if (Array.isArray(oauthQueryParams['response_type'])) {\n    oauthQueryParams['response_type'] = oauthQueryParams['response_type'].join(' ');\n  }\n\n  if (oauthParams.responseType.indexOf('id_token') !== -1 && oauthParams.scopes.indexOf('openid') === -1) {\n    throw new AuthSdkError('openid scope must be specified in the scopes argument when requesting an id_token');\n  } else {\n    oauthQueryParams.scope = oauthParams.scopes.join(' ');\n  }\n\n  return oauthQueryParams;\n}\n\nfunction buildAuthorizeParams(oauthParams) {\n  var oauthQueryParams = convertOAuthParamsToQueryParams(oauthParams);\n  return util.toQueryParams(oauthQueryParams);\n}\n/*\n * Retrieve an idToken from an Okta or a third party idp\n * \n * Two main flows:\n *\n *  1) Exchange a sessionToken for a token\n * \n *    Required:\n *      clientId: passed via the OktaAuth constructor or into getToken\n *      sessionToken: 'yourtoken'\n *\n *    Optional:\n *      redirectUri: defaults to window.location.href\n *      scopes: defaults to ['openid', 'email']\n *\n *    Forced:\n *      prompt: 'none'\n *      responseMode: 'okta_post_message'\n *      display: undefined\n *\n *  2) Get a token from an idp\n *\n *    Required:\n *      clientId: passed via the OktaAuth constructor or into getToken\n *\n *    Optional:\n *      redirectUri: defaults to window.location.href\n *      scopes: defaults to ['openid', 'email']\n *      idp: defaults to Okta as an idp\n *      prompt: no default. Pass 'none' to throw an error if user is not signed in\n *\n *    Forced:\n *      display: 'popup'\n *\n *  Only common optional params shown. Any OAuth parameters not explicitly forced are available to override\n *\n * @param {Object} oauthOptions\n * @param {String} [oauthOptions.clientId] ID of this client\n * @param {String} [oauthOptions.redirectUri] URI that the iframe or popup will go to once authenticated\n * @param {String[]} [oauthOptions.scopes] OAuth 2.0 scopes to request (openid must be specified)\n * @param {String} [oauthOptions.idp] ID of an external IdP to use for user authentication\n * @param {String} [oauthOptions.sessionToken] Bootstrap Session Token returned by the Okta Authentication API\n * @param {String} [oauthOptions.prompt] Determines whether the Okta login will be displayed on failure.\n *                                       Use 'none' to prevent this behavior\n *\n * @param {Object} options\n * @param {Integer} [options.timeout] Time in ms before the flow is automatically terminated. Defaults to 120000\n * @param {String} [options.popupTitle] Title dispayed in the popup.\n *                                      Defaults to 'External Identity Provider User Authentication'\n */\n\n\nfunction getToken(sdk, oauthOptions, options) {\n  oauthOptions = oauthOptions || {};\n  options = options || {}; // Default OAuth query params\n\n  var oauthParams = getDefaultOAuthParams(sdk, oauthOptions); // Start overriding any options that don't make sense\n\n  var sessionTokenOverrides = {\n    prompt: 'none',\n    responseMode: 'okta_post_message',\n    display: null\n  };\n  var idpOverrides = {\n    display: 'popup'\n  };\n\n  if (oauthOptions.sessionToken) {\n    util.extend(oauthParams, sessionTokenOverrides);\n  } else if (oauthOptions.idp) {\n    util.extend(oauthParams, idpOverrides);\n  } // Use the query params to build the authorize url\n\n\n  var requestUrl, urls;\n\n  try {\n    // Get authorizeUrl and issuer\n    urls = oauthUtil.getOAuthUrls(sdk, oauthParams, options);\n    requestUrl = urls.authorizeUrl + buildAuthorizeParams(oauthParams);\n  } catch (e) {\n    return Q.reject(e);\n  } // Determine the flow type\n\n\n  var flowType;\n\n  if (oauthParams.sessionToken || oauthParams.display === null) {\n    flowType = 'IFRAME';\n  } else if (oauthParams.display === 'popup') {\n    flowType = 'POPUP';\n  } else {\n    flowType = 'IMPLICIT';\n  }\n\n  function getOrigin(url) {\n    var originRegex = /^(https?\\:\\/\\/)?([^:\\/?#]*(?:\\:[0-9]+)?)/;\n    return originRegex.exec(url)[0];\n  } // Execute the flow type\n\n\n  switch (flowType) {\n    case 'IFRAME':\n      var iframePromise = addPostMessageListener(sdk, options.timeout, oauthParams.state);\n      var iframeEl = oauthUtil.loadFrame(requestUrl);\n      return iframePromise.then(function (res) {\n        return handleOAuthResponse(sdk, oauthParams, res, urls);\n      }).fin(function () {\n        if (document.body.contains(iframeEl)) {\n          iframeEl.parentElement.removeChild(iframeEl);\n        }\n      });\n\n    case 'POPUP':\n      // eslint-disable-line no-case-declarations\n      var popupPromise; // Add listener on postMessage before window creation, so\n      // postMessage isn't triggered before we're listening\n\n      if (oauthParams.responseMode === 'okta_post_message') {\n        if (!sdk.features.isPopupPostMessageSupported()) {\n          return Q.reject(new AuthSdkError('This browser doesn\\'t have full postMessage support'));\n        }\n\n        popupPromise = addPostMessageListener(sdk, options.timeout, oauthParams.state);\n      } // Create the window\n\n\n      var windowOptions = {\n        popupTitle: options.popupTitle\n      };\n      var windowEl = oauthUtil.loadPopup(requestUrl, windowOptions); // Poll until we get a valid hash fragment\n\n      if (oauthParams.responseMode === 'fragment') {\n        var windowOrigin = getOrigin(sdk.idToken.authorize._getLocationHref());\n        var redirectUriOrigin = getOrigin(oauthParams.redirectUri);\n\n        if (windowOrigin !== redirectUriOrigin) {\n          return Q.reject(new AuthSdkError('Using fragment, the redirectUri origin (' + redirectUriOrigin + ') must match the origin of this page (' + windowOrigin + ')'));\n        }\n\n        popupPromise = addFragmentListener(sdk, windowEl, options.timeout);\n      } // Both postMessage and fragment require a poll to see if the popup closed\n\n\n      var popupDeferred = Q.defer();\n\n      var hasClosed = function hasClosed(win) {\n        // eslint-disable-line no-inner-declarations\n        if (win.closed) {\n          popupDeferred.reject(new AuthSdkError('Unable to parse OAuth flow response'));\n        }\n      };\n\n      var closePoller = setInterval(function () {\n        hasClosed(windowEl);\n      }, 500); // Proxy the promise results into the deferred\n\n      popupPromise.then(function (res) {\n        popupDeferred.resolve(res);\n      }).fail(function (err) {\n        popupDeferred.reject(err);\n      });\n      return popupDeferred.promise.then(function (res) {\n        return handleOAuthResponse(sdk, oauthParams, res, urls);\n      }).fin(function () {\n        if (!windowEl.closed) {\n          clearInterval(closePoller);\n          windowEl.close();\n        }\n      });\n\n    default:\n      return Q.reject(new AuthSdkError('The full page redirect flow is not supported'));\n  }\n}\n\nfunction getWithoutPrompt(sdk, oauthOptions, options) {\n  var oauthParams = util.clone(oauthOptions) || {};\n  util.extend(oauthParams, {\n    prompt: 'none',\n    responseMode: 'okta_post_message',\n    display: null\n  });\n  return getToken(sdk, oauthParams, options);\n}\n\nfunction getWithPopup(sdk, oauthOptions, options) {\n  var oauthParams = util.clone(oauthOptions) || {};\n  util.extend(oauthParams, {\n    display: 'popup'\n  });\n  return getToken(sdk, oauthParams, options);\n}\n\nfunction getWithRedirect(sdk, oauthOptions, options) {\n  oauthOptions = util.clone(oauthOptions) || {};\n  var oauthParams = getDefaultOAuthParams(sdk, oauthOptions); // If the user didn't specify a responseMode\n\n  if (!oauthOptions.responseMode) {\n    // And it's only an auth code request (responseType could be an array)\n    var respType = oauthParams.responseType;\n\n    if (respType.indexOf('code') !== -1 && (util.isString(respType) || Array.isArray(respType) && respType.length === 1)) {\n      // Default the responseMode to query\n      util.extend(oauthParams, {\n        responseMode: 'query'\n      }); // Otherwise, default to fragment\n    } else {\n      util.extend(oauthParams, {\n        responseMode: 'fragment'\n      });\n    }\n  }\n\n  var urls = oauthUtil.getOAuthUrls(sdk, oauthParams, options);\n  var requestUrl = urls.authorizeUrl + buildAuthorizeParams(oauthParams); // Set session cookie to store the oauthParams\n\n  cookies.setCookie(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME, JSON.stringify({\n    responseType: oauthParams.responseType,\n    state: oauthParams.state,\n    nonce: oauthParams.nonce,\n    scopes: oauthParams.scopes,\n    urls: urls\n  })); // Set nonce cookie for servers to validate nonce in id_token\n\n  cookies.setCookie(config.REDIRECT_NONCE_COOKIE_NAME, oauthParams.nonce); // Set state cookie for servers to validate state\n\n  cookies.setCookie(config.REDIRECT_STATE_COOKIE_NAME, oauthParams.state);\n\n  sdk.token.getWithRedirect._setLocation(requestUrl);\n}\n\nfunction refreshToken(sdk, token) {\n  if (!oauthUtil.isToken(token)) {\n    return Q.reject(new AuthSdkError('Refresh must be passed a token with ' + 'an array of scopes and an accessToken or idToken'));\n  }\n\n  var responseType;\n\n  if (token.accessToken) {\n    responseType = 'token';\n  } else {\n    responseType = 'id_token';\n  }\n\n  return sdk.token.getWithoutPrompt({\n    responseType: responseType,\n    scopes: token.scopes\n  }, {\n    authorizeUrl: token.authorizeUrl,\n    userinfoUrl: token.userinfoUrl,\n    issuer: token.issuer\n  });\n}\n\nfunction removeHash(sdk) {\n  var nativeHistory = sdk.token.parseFromUrl._getHistory();\n\n  var nativeDoc = sdk.token.parseFromUrl._getDocument();\n\n  var nativeLoc = sdk.token.parseFromUrl._getLocation();\n\n  if (nativeHistory && nativeHistory.replaceState) {\n    nativeHistory.replaceState(null, nativeDoc.title, nativeLoc.pathname + nativeLoc.search);\n  } else {\n    nativeLoc.hash = '';\n  }\n}\n\nfunction parseFromUrl(sdk, url) {\n  var nativeLoc = sdk.token.parseFromUrl._getLocation();\n\n  var hash = nativeLoc.hash;\n\n  if (url) {\n    hash = url.substring(url.indexOf('#'));\n  }\n\n  var oauthParamsCookie = cookies.getCookie(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME);\n\n  if (!hash || !oauthParamsCookie) {\n    return Q.reject(new AuthSdkError('Unable to parse a token from the url'));\n  }\n\n  try {\n    var oauthParams = JSON.parse(oauthParamsCookie);\n    var urls = oauthParams.urls;\n    delete oauthParams.urls;\n    cookies.deleteCookie(config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME);\n  } catch (e) {\n    return Q.reject(new AuthSdkError('Unable to parse the ' + config.REDIRECT_OAUTH_PARAMS_COOKIE_NAME + ' cookie: ' + e.message));\n  }\n\n  return Q.resolve(oauthUtil.hashToObject(hash)).then(function (res) {\n    if (!url) {\n      // Remove the hash from the url\n      removeHash(sdk);\n    }\n\n    return handleOAuthResponse(sdk, oauthParams, res, urls);\n  });\n}\n\nfunction getUserInfo(sdk, accessTokenObject) {\n  if (!accessTokenObject || !oauthUtil.isToken(accessTokenObject) && !accessTokenObject.accessToken && !accessTokenObject.userinfoUrl) {\n    return Q.reject(new AuthSdkError('getUserInfo requires an access token object'));\n  }\n\n  return http.httpRequest(sdk, {\n    url: accessTokenObject.userinfoUrl,\n    method: 'GET',\n    accessToken: accessTokenObject.accessToken\n  }).fail(function (err) {\n    if (err.xhr && (err.xhr.status === 401 || err.xhr.status === 403)) {\n      var authenticateHeader = err.xhr.getResponseHeader('WWW-Authenticate');\n\n      if (authenticateHeader) {\n        var errorMatches = authenticateHeader.match(/error=\"(.*?)\"/) || [];\n        var errorDescriptionMatches = authenticateHeader.match(/error_description=\"(.*?)\"/) || [];\n        var error = errorMatches[1];\n        var errorDescription = errorDescriptionMatches[1];\n\n        if (error && errorDescription) {\n          err = new OAuthError(error, errorDescription);\n        }\n      }\n    }\n\n    throw err;\n  });\n}\n\nmodule.exports = {\n  getToken: getToken,\n  getWithoutPrompt: getWithoutPrompt,\n  getWithPopup: getWithPopup,\n  getWithRedirect: getWithRedirect,\n  parseFromUrl: parseFromUrl,\n  refreshIdToken: refreshIdToken,\n  decodeToken: decodeToken,\n  verifyIdToken: verifyIdToken,\n  refreshToken: refreshToken,\n  getUserInfo: getUserInfo,\n  verifyToken: verifyToken\n};","map":null,"metadata":{},"sourceType":"script"}