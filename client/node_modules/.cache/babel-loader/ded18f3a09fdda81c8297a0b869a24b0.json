{"ast":null,"code":"/* eslint-disable complexity, max-statements */\nvar http = require('./http');\n\nvar util = require('./util');\n\nvar storageUtil = require('./storageUtil');\n\nvar AuthSdkError = require('./errors/AuthSdkError');\n\nvar httpCache = storageUtil.getHttpCache();\n\nfunction isToken(obj) {\n  if (obj && (obj.accessToken || obj.idToken) && Array.isArray(obj.scopes)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction addListener(eventTarget, name, fn) {\n  if (eventTarget.addEventListener) {\n    eventTarget.addEventListener(name, fn);\n  } else {\n    eventTarget.attachEvent('on' + name, fn);\n  }\n}\n\nfunction removeListener(eventTarget, name, fn) {\n  if (eventTarget.removeEventListener) {\n    eventTarget.removeEventListener(name, fn);\n  } else {\n    eventTarget.detachEvent('on' + name, fn);\n  }\n}\n\nfunction loadFrame(src) {\n  var iframe = document.createElement('iframe');\n  iframe.style.display = 'none';\n  iframe.src = src;\n  return document.body.appendChild(iframe);\n}\n\nfunction loadPopup(src, options) {\n  var title = options.popupTitle || 'External Identity Provider User Authentication';\n  var appearance = 'toolbar=no, scrollbars=yes, resizable=yes, ' + 'top=100, left=500, width=600, height=600';\n\n  if (util.isIE11OrLess()) {\n    // IE<=11 doesn't fully support postMessage at time of writting.\n    // the following simple solution happened to solve the issue\n    // without adding another proxy layer which makes flow more complecated.\n    var winEl = window.open('/', title, appearance);\n    winEl.location.href = src;\n    return winEl;\n  } else {\n    return window.open(src, title, appearance);\n  }\n}\n\nfunction getWellKnown(sdk, issuer) {\n  return http.get(sdk, (issuer || sdk.options.url) + '/.well-known/openid-configuration', {\n    cacheResponse: true\n  });\n}\n\nfunction getKey(sdk, issuer, kid) {\n  return getWellKnown(sdk, issuer).then(function (wellKnown) {\n    var jwksUri = wellKnown['jwks_uri']; // Check our kid against the cached version (if it exists and isn't expired)\n\n    var cacheContents = httpCache.getStorage();\n    var cachedResponse = cacheContents[jwksUri];\n\n    if (cachedResponse && Date.now() / 1000 < cachedResponse.expiresAt) {\n      var cachedKey = util.find(cachedResponse.response.keys, {\n        kid: kid\n      });\n\n      if (cachedKey) {\n        return cachedKey;\n      }\n    } // Remove cache for the key\n\n\n    httpCache.clearStorage(jwksUri); // Pull the latest keys if the key wasn't in the cache\n\n    return http.get(sdk, jwksUri, {\n      cacheResponse: true\n    }).then(function (res) {\n      var key = util.find(res.keys, {\n        kid: kid\n      });\n\n      if (key) {\n        return key;\n      }\n\n      throw new AuthSdkError('The key id, ' + kid + ', was not found in the server\\'s keys');\n    });\n  });\n}\n\nfunction validateClaims(sdk, claims, aud, iss, nonce) {\n  if (!claims || !iss || !aud) {\n    throw new AuthSdkError('The jwt, iss, and aud arguments are all required');\n  }\n\n  if (nonce && claims.nonce !== nonce) {\n    throw new AuthSdkError('OAuth flow response nonce doesn\\'t match request nonce');\n  }\n\n  var now = Math.floor(new Date().getTime() / 1000);\n\n  if (claims.iss !== iss) {\n    throw new AuthSdkError('The issuer [' + claims.iss + '] ' + 'does not match [' + iss + ']');\n  }\n\n  if (claims.aud !== aud) {\n    throw new AuthSdkError('The audience [' + claims.aud + '] ' + 'does not match [' + aud + ']');\n  }\n\n  if (claims.iat > claims.exp) {\n    throw new AuthSdkError('The JWT expired before it was issued');\n  }\n\n  if (now - sdk.options.maxClockSkew > claims.exp) {\n    throw new AuthSdkError('The JWT expired and is no longer valid');\n  }\n\n  if (claims.iat > now + sdk.options.maxClockSkew) {\n    throw new AuthSdkError('The JWT was issued in the future');\n  }\n}\n\nfunction getOAuthUrls(sdk, oauthParams, options) {\n  options = options || {}; // Get user-supplied arguments\n\n  var authorizeUrl = util.removeTrailingSlash(options.authorizeUrl) || sdk.options.authorizeUrl;\n  var issuer = util.removeTrailingSlash(options.issuer) || sdk.options.issuer;\n  var userinfoUrl = util.removeTrailingSlash(options.userinfoUrl) || sdk.options.userinfoUrl; // If an issuer exists but it's not a url, assume it's an authServerId\n\n  if (issuer && !/^https?:/.test(issuer)) {\n    // Make it a url\n    issuer = sdk.options.url + '/oauth2/' + issuer;\n  } // If an authorizeUrl is supplied without an issuer, and an id_token is requested\n\n\n  if (!issuer && authorizeUrl && oauthParams.responseType.indexOf('id_token') !== -1) {\n    // The issuer is ambiguous, so we won't be able to validate the id_token jwt\n    throw new AuthSdkError('Cannot request idToken with an authorizeUrl without an issuer');\n  } // If a token is requested without an issuer\n\n\n  if (!issuer && oauthParams.responseType.indexOf('token') !== -1) {\n    // If an authorizeUrl is supplied without a userinfoUrl\n    if (authorizeUrl && !userinfoUrl) {\n      // The userinfoUrl is ambiguous, so we won't be able to call getUserInfo\n      throw new AuthSdkError('Cannot request accessToken with an authorizeUrl without an issuer or userinfoUrl');\n    } // If a userinfoUrl is supplied without a authorizeUrl\n\n\n    if (userinfoUrl && !authorizeUrl) {\n      // The authorizeUrl is ambiguous, so we won't be able to call the authorize endpoint\n      throw new AuthSdkError('Cannot request token with an userinfoUrl without an issuer or authorizeUrl');\n    }\n  }\n\n  var sharedResourceServerRegex = new RegExp('^https?://.*?/oauth2/.+'); // Default the issuer to our baseUrl\n\n  issuer = issuer || sdk.options.url; // A shared resource server issuer looks like:\n  // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7\n\n  if (sharedResourceServerRegex.test(issuer)) {\n    // A shared resource server authorizeUrl looks like:\n    // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7/v1/authorize\n    authorizeUrl = authorizeUrl || issuer + '/v1/authorize'; // Shared resource server userinfoUrls look like:\n    // https://example.okta.com/oauth2/aus8aus76q8iphupD0h7/v1/userinfo\n\n    userinfoUrl = userinfoUrl || issuer + '/v1/userinfo'; // Normally looks like:\n    // https://example.okta.com\n  } else {\n    // Normal authorizeUrls look like:\n    // https://example.okta.com/oauth2/v1/authorize\n    authorizeUrl = authorizeUrl || issuer + '/oauth2/v1/authorize'; // Normal userinfoUrls look like:\n    // https://example.okta.com/oauth2/v1/userinfo\n\n    userinfoUrl = userinfoUrl || issuer + '/oauth2/v1/userinfo';\n  }\n\n  return {\n    issuer: issuer,\n    authorizeUrl: authorizeUrl,\n    userinfoUrl: userinfoUrl\n  };\n}\n\nfunction hashToObject(hash) {\n  // Predefine regexs for parsing hash\n  var plus2space = /\\+/g;\n  var paramSplit = /([^&=]+)=?([^&]*)/g; // Remove the leading hash\n\n  var fragment = hash.substring(1);\n  var obj = {}; // Loop until we have no more params\n\n  var param;\n\n  while (true) {\n    // eslint-disable-line no-constant-condition\n    param = paramSplit.exec(fragment);\n\n    if (!param) {\n      break;\n    }\n\n    var key = param[1];\n    var value = param[2]; // id_token should remain base64url encoded\n\n    if (key === 'id_token' || key === 'access_token' || key === 'code') {\n      obj[key] = value;\n    } else {\n      obj[key] = decodeURIComponent(value.replace(plus2space, ' '));\n    }\n  }\n\n  return obj;\n}\n\nmodule.exports = {\n  getWellKnown: getWellKnown,\n  getKey: getKey,\n  validateClaims: validateClaims,\n  getOAuthUrls: getOAuthUrls,\n  loadFrame: loadFrame,\n  loadPopup: loadPopup,\n  hashToObject: hashToObject,\n  isToken: isToken,\n  addListener: addListener,\n  removeListener: removeListener\n};","map":null,"metadata":{},"sourceType":"script"}