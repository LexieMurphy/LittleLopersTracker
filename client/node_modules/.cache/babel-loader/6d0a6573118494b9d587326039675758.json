{"ast":null,"code":"/* eslint complexity:[0,8] max-statements:[0,21] */\nvar util = require('./util');\n\nvar AuthSdkError = require('./errors/AuthSdkError');\n\nvar storageUtil = require('./storageUtil');\n\nvar Q = require('q');\n\nvar Emitter = require('tiny-emitter');\n\nvar config = require('./config');\n\nvar storageBuilder = require('./storageBuilder');\n\nfunction emitExpired(tokenMgmtRef, key, token) {\n  tokenMgmtRef.emitter.emit('expired', key, token);\n}\n\nfunction clearRefreshTimeout(tokenMgmtRef, key) {\n  clearTimeout(tokenMgmtRef.refreshTimeouts[key]);\n  delete tokenMgmtRef.refreshTimeouts[key];\n}\n\nfunction clearRefreshTimeoutAll(tokenMgmtRef) {\n  var refreshTimeouts = tokenMgmtRef.refreshTimeouts;\n\n  for (var key in refreshTimeouts) {\n    if (!refreshTimeouts.hasOwnProperty(key)) {\n      continue;\n    }\n\n    clearRefreshTimeout(tokenMgmtRef, key);\n  }\n\n  tokenMgmtRef.refreshTimeouts = {};\n}\n\nfunction setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token) {\n  var refreshWait = token.expiresAt * 1000 - Date.now();\n\n  if (refreshWait < 0) {\n    // Already expired\n    refreshWait = 0;\n  }\n\n  var refreshTimeout = setTimeout(function () {\n    if (tokenMgmtRef.autoRefresh) {\n      return refresh(sdk, tokenMgmtRef, storage, key);\n    } else if (token.expiresAt * 1000 <= Date.now()) {\n      remove(tokenMgmtRef, storage, key);\n      emitExpired(tokenMgmtRef, key, token);\n    }\n  }, refreshWait); // Clear any existing timeout\n\n  clearRefreshTimeout(tokenMgmtRef, key); // Add a new timeout\n\n  tokenMgmtRef.refreshTimeouts[key] = refreshTimeout;\n}\n\nfunction setRefreshTimeoutAll(sdk, tokenMgmtRef, storage) {\n  try {\n    var tokenStorage = storage.getStorage();\n  } catch (e) {\n    // Any errors thrown on instantiation will not be caught,\n    // because there are no listeners yet\n    tokenMgmtRef.emitter.emit('error', e);\n    return;\n  }\n\n  for (var key in tokenStorage) {\n    if (!tokenStorage.hasOwnProperty(key)) {\n      continue;\n    }\n\n    var token = tokenStorage[key];\n    setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token);\n  }\n}\n\nfunction add(sdk, tokenMgmtRef, storage, key, token) {\n  var tokenStorage = storage.getStorage();\n\n  if (!util.isObject(token) || !token.scopes || !token.expiresAt && token.expiresAt !== 0 || !token.idToken && !token.accessToken) {\n    throw new AuthSdkError('Token must be an Object with scopes, expiresAt, and an idToken or accessToken properties');\n  }\n\n  tokenStorage[key] = token;\n  storage.setStorage(tokenStorage);\n  setRefreshTimeout(sdk, tokenMgmtRef, storage, key, token);\n}\n\nfunction get(storage, key) {\n  var tokenStorage = storage.getStorage();\n  return tokenStorage[key];\n}\n\nfunction remove(tokenMgmtRef, storage, key) {\n  // Clear any listener for this token\n  clearRefreshTimeout(tokenMgmtRef, key); // Remove it from storage\n\n  var tokenStorage = storage.getStorage();\n  delete tokenStorage[key];\n  storage.setStorage(tokenStorage);\n}\n\nfunction refresh(sdk, tokenMgmtRef, storage, key) {\n  try {\n    var token = get(storage, key);\n\n    if (!token) {\n      throw new AuthSdkError('The tokenManager has no token for the key: ' + key);\n    }\n  } catch (e) {\n    return Q.reject(e);\n  } // Remove existing autoRefresh timeout for this key\n\n\n  clearRefreshTimeout(tokenMgmtRef, key);\n  return sdk.token.refresh(token).then(function (freshToken) {\n    add(sdk, tokenMgmtRef, storage, key, freshToken);\n    tokenMgmtRef.emitter.emit('refreshed', key, freshToken, token);\n    return freshToken;\n  }).fail(function (err) {\n    if (err.name === 'OAuthError') {\n      remove(tokenMgmtRef, storage, key);\n      emitExpired(tokenMgmtRef, key, token);\n    }\n\n    throw err;\n  });\n}\n\nfunction clear(tokenMgmtRef, storage) {\n  clearRefreshTimeoutAll(tokenMgmtRef);\n  storage.clearStorage();\n}\n\nfunction TokenManager(sdk, options) {\n  options = options || {};\n  options.storage = options.storage || 'localStorage';\n\n  if (!options.autoRefresh && options.autoRefresh !== false) {\n    options.autoRefresh = true;\n  }\n\n  if (options.storage === 'localStorage' && !storageUtil.browserHasLocalStorage()) {\n    util.warn('This browser doesn\\'t support localStorage. Switching to sessionStorage.');\n    options.storage = 'sessionStorage';\n  }\n\n  if (options.storage === 'sessionStorage' && !storageUtil.browserHasSessionStorage()) {\n    util.warn('This browser doesn\\'t support sessionStorage. Switching to cookie-based storage.');\n    options.storage = 'cookie';\n  }\n\n  var storage;\n\n  switch (options.storage) {\n    case 'localStorage':\n      storage = storageBuilder(localStorage, config.TOKEN_STORAGE_NAME);\n      break;\n\n    case 'sessionStorage':\n      storage = storageBuilder(sessionStorage, config.TOKEN_STORAGE_NAME);\n      break;\n\n    case 'cookie':\n      storage = storageBuilder(storageUtil.getCookieStorage(), config.TOKEN_STORAGE_NAME);\n      break;\n\n    default:\n      throw new AuthSdkError('Unrecognized storage option');\n  }\n\n  var tokenMgmtRef = {\n    emitter: new Emitter(),\n    autoRefresh: options.autoRefresh,\n    refreshTimeouts: {}\n  };\n  this.add = util.bind(add, this, sdk, tokenMgmtRef, storage);\n  this.get = util.bind(get, this, storage);\n  this.remove = util.bind(remove, this, tokenMgmtRef, storage);\n  this.clear = util.bind(clear, this, tokenMgmtRef, storage);\n  this.refresh = util.bind(refresh, this, sdk, tokenMgmtRef, storage);\n  this.on = util.bind(tokenMgmtRef.emitter.on, tokenMgmtRef.emitter);\n  this.off = util.bind(tokenMgmtRef.emitter.off, tokenMgmtRef.emitter);\n  setRefreshTimeoutAll(sdk, tokenMgmtRef, storage);\n}\n\nmodule.exports = TokenManager;","map":null,"metadata":{},"sourceType":"script"}