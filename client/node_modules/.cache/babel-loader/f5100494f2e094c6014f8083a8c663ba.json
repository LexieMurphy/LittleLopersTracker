{"ast":null,"code":"/* eslint-disable complexity */\nvar util = require('./util');\n\nvar cookies = require('./cookies');\n\nvar storageUtil = require('./storageUtil');\n\nvar Q = require('q');\n\nvar AuthApiError = require('./errors/AuthApiError');\n\nvar config = require('./config');\n\nfunction httpRequest(sdk, options) {\n  options = options || {};\n  var url = options.url,\n      method = options.method,\n      args = options.args,\n      saveAuthnState = options.saveAuthnState,\n      accessToken = options.accessToken,\n      httpCache = storageUtil.getHttpCache();\n\n  if (options.cacheResponse) {\n    var cacheContents = httpCache.getStorage();\n    var cachedResponse = cacheContents[url];\n\n    if (cachedResponse && Date.now() / 1000 < cachedResponse.expiresAt) {\n      return Q.resolve(cachedResponse.response);\n    }\n  }\n\n  var headers = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json',\n    'X-Okta-User-Agent-Extended': sdk.userAgent\n  };\n  util.extend(headers, sdk.options.headers, options.headers);\n\n  if (accessToken && util.isString(accessToken)) {\n    headers['Authorization'] = 'Bearer ' + accessToken;\n  }\n\n  var ajaxOptions = {\n    headers: headers,\n    data: args || undefined\n  };\n  var err, res;\n  return new Q(sdk.options.ajaxRequest(method, url, ajaxOptions)).then(function (resp) {\n    res = resp.responseText;\n\n    if (res && util.isString(res)) {\n      res = JSON.parse(res);\n    }\n\n    if (saveAuthnState) {\n      if (!res.stateToken) {\n        cookies.deleteCookie(config.STATE_TOKEN_COOKIE_NAME);\n      }\n    }\n\n    if (res && res.stateToken && res.expiresAt) {\n      cookies.setCookie(config.STATE_TOKEN_COOKIE_NAME, res.stateToken, res.expiresAt);\n    }\n\n    if (res && options.cacheResponse) {\n      httpCache.updateStorage(url, {\n        expiresAt: Math.floor(Date.now() / 1000) + config.DEFAULT_CACHE_DURATION,\n        response: res\n      });\n    }\n\n    return res;\n  }).fail(function (resp) {\n    var serverErr = resp.responseText || {};\n\n    if (util.isString(serverErr)) {\n      try {\n        serverErr = JSON.parse(serverErr);\n      } catch (e) {\n        serverErr = {\n          errorSummary: 'Unknown error'\n        };\n      }\n    }\n\n    if (resp.status >= 500) {\n      serverErr.errorSummary = 'Unknown error';\n    }\n\n    if (sdk.options.transformErrorXHR) {\n      resp = sdk.options.transformErrorXHR(util.clone(resp));\n    }\n\n    err = new AuthApiError(serverErr, resp);\n\n    if (err.errorCode === 'E0000011') {\n      cookies.deleteCookie(config.STATE_TOKEN_COOKIE_NAME);\n    }\n\n    throw err;\n  });\n}\n\nfunction get(sdk, url, options) {\n  url = util.isAbsoluteUrl(url) ? url : sdk.options.url + url;\n  var getOptions = {\n    url: url,\n    method: 'GET'\n  };\n  util.extend(getOptions, options);\n  return httpRequest(sdk, getOptions);\n}\n\nfunction post(sdk, url, args, options) {\n  url = util.isAbsoluteUrl(url) ? url : sdk.options.url + url;\n  var postOptions = {\n    url: url,\n    method: 'POST',\n    args: args,\n    saveAuthnState: true\n  };\n  util.extend(postOptions, options);\n  return httpRequest(sdk, postOptions);\n}\n\nmodule.exports = {\n  get: get,\n  post: post,\n  httpRequest: httpRequest\n};","map":null,"metadata":{},"sourceType":"script"}